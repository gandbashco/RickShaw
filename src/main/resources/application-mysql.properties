# ===============================
# = DATA SOURCE
# ===============================

# Configurations for the database connection

# Connection url
spring.datasource.url = jdbc:mysql://localhost:3306/rickshaw?useSSL=false

# Username and password
spring.datasource.username = moeb
spring.datasource.password = letmein

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show generated sql (at least for development)
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
# Note: 'create-drop' was causing issues with hibernate trying to alter tables
# before they even existed. So reading here:
# http://stackoverflow.com/questions/24727610/spring-boot-with-hibernate-generating-drop-constraint-errors-on-startup-with-h2
# changing it to 'update' was advised
spring.jpa.hibernate.ddl-auto = update

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect